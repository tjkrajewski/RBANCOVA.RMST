# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
#--------------------------------------------------------------------------------#
# Filter PBC Data
#--------------------------------------------------------------------------------#
library(survival)
#Filter to those enrolled in the randomized trial
pbc_filtered <- pbc %>% filter(!is.na(trt))
#Original data: 0/1/2 = censored/transplant/dead
##Edit so that transplant = censored at time of transplant [death = 1, 0 = censored/transplant]
pbc_filtered <- pbc_filtered %>%
mutate(status_dichot = ifelse(status == 2, 1, 0))
#Create year variable and create arm variable [0=placebo, 1=D-penicillmain]
pbc_filtered <- pbc_filtered %>%
mutate(time_year = time/365,
arm = ifelse(trt == 2, 0, trt))
#Current RBANCOVA-RMST methodology assumes no missing data
#impute mean copper level within each group when missing.
mean_copper_1 <- mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==1,]$copper)
mean_copper_0 <-  mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==0,]$copper)
pbc_filtered <- pbc_filtered %>%
mutate(copper_imp = ifelse(is.na(copper), ifelse(arm==1, mean_copper_1, mean_copper_0), copper))
pbc_filtered_trt <- pbc_filtered[pbc_filtered$arm==1,]
pbc_filtered_ctl <- pbc_filtered[pbc_filtered$arm==0,]
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=NULL, timepoints=10, num_intervals=10)
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=10, num_intervals=10)
#Figure for single time point
##Needs to get estimates from function
##Needs to get estimates from continuous function (Tian), maybe Andersen?
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=c(5,10), num_intervals=10)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
#--------------------------------------------------------------------------------#
# Filter PBC Data
#--------------------------------------------------------------------------------#
library(survival)
#Filter to those enrolled in the randomized trial
pbc_filtered <- pbc %>% filter(!is.na(trt))
#Original data: 0/1/2 = censored/transplant/dead
##Edit so that transplant = censored at time of transplant [death = 1, 0 = censored/transplant]
pbc_filtered <- pbc_filtered %>%
mutate(status_dichot = ifelse(status == 2, 1, 0))
#Create year variable and create arm variable [0=placebo, 1=D-penicillmain]
pbc_filtered <- pbc_filtered %>%
mutate(time_year = time/365,
arm = ifelse(trt == 2, 0, trt))
#Current RBANCOVA-RMST methodology assumes no missing data
#impute mean copper level within each group when missing.
mean_copper_1 <- mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==1,]$copper)
mean_copper_0 <-  mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==0,]$copper)
pbc_filtered <- pbc_filtered %>%
mutate(copper_imp = ifelse(is.na(copper), ifelse(arm==1, mean_copper_1, mean_copper_0), copper))
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
pbc_filtered_trt <- pbc_filtered[pbc_filtered$arm==1,]
pbc_filtered_ctl <- pbc_filtered[pbc_filtered$arm==0,]
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=NULL, timepoints=10, num_intervals=10)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
#--------------------------------------------------------------------------------#
# Filter PBC Data
#--------------------------------------------------------------------------------#
library(survival)
#Filter to those enrolled in the randomized trial
pbc_filtered <- pbc %>% filter(!is.na(trt))
#Original data: 0/1/2 = censored/transplant/dead
##Edit so that transplant = censored at time of transplant [death = 1, 0 = censored/transplant]
pbc_filtered <- pbc_filtered %>%
mutate(status_dichot = ifelse(status == 2, 1, 0))
#Create year variable and create arm variable [0=placebo, 1=D-penicillmain]
pbc_filtered <- pbc_filtered %>%
mutate(time_year = time/365,
arm = ifelse(trt == 2, 0, trt))
#Current RBANCOVA-RMST methodology assumes no missing data
#impute mean copper level within each group when missing.
mean_copper_1 <- mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==1,]$copper)
mean_copper_0 <-  mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==0,]$copper)
pbc_filtered <- pbc_filtered %>%
mutate(copper_imp = ifelse(is.na(copper), ifelse(arm==1, mean_copper_1, mean_copper_0), copper))
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
pbc_filtered_trt <- pbc_filtered[pbc_filtered$arm==1,]
pbc_filtered_ctl <- pbc_filtered[pbc_filtered$arm==0,]
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=NULL, timepoints=10, num_intervals=10)
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=10, num_intervals=10)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
#--------------------------------------------------------------------------------#
# Filter PBC Data
#--------------------------------------------------------------------------------#
library(survival)
#Filter to those enrolled in the randomized trial
pbc_filtered <- pbc %>% filter(!is.na(trt))
#Original data: 0/1/2 = censored/transplant/dead
##Edit so that transplant = censored at time of transplant [death = 1, 0 = censored/transplant]
pbc_filtered <- pbc_filtered %>%
mutate(status_dichot = ifelse(status == 2, 1, 0))
#Create year variable and create arm variable [0=placebo, 1=D-penicillmain]
pbc_filtered <- pbc_filtered %>%
mutate(time_year = time/365,
arm = ifelse(trt == 2, 0, trt))
#Current RBANCOVA-RMST methodology assumes no missing data
#impute mean copper level within each group when missing.
mean_copper_1 <- mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==1,]$copper)
mean_copper_0 <-  mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==0,]$copper)
pbc_filtered <- pbc_filtered %>%
mutate(copper_imp = ifelse(is.na(copper), ifelse(arm==1, mean_copper_1, mean_copper_0), copper))
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
pbc_filtered_trt <- pbc_filtered[pbc_filtered$arm==1,]
pbc_filtered_ctl <- pbc_filtered[pbc_filtered$arm==0,]
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=NULL, timepoints=10, num_intervals=10)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
#--------------------------------------------------------------------------------#
# Filter PBC Data
#--------------------------------------------------------------------------------#
library(survival)
#Filter to those enrolled in the randomized trial
pbc_filtered <- pbc %>% filter(!is.na(trt))
#Original data: 0/1/2 = censored/transplant/dead
##Edit so that transplant = censored at time of transplant [death = 1, 0 = censored/transplant]
pbc_filtered <- pbc_filtered %>%
mutate(status_dichot = ifelse(status == 2, 1, 0))
#Create year variable and create arm variable [0=placebo, 1=D-penicillmain]
pbc_filtered <- pbc_filtered %>%
mutate(time_year = time/365,
arm = ifelse(trt == 2, 0, trt))
#Current RBANCOVA-RMST methodology assumes no missing data
#impute mean copper level within each group when missing.
mean_copper_1 <- mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==1,]$copper)
mean_copper_0 <-  mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==0,]$copper)
pbc_filtered <- pbc_filtered %>%
mutate(copper_imp = ifelse(is.na(copper), ifelse(arm==1, mean_copper_1, mean_copper_0), copper))
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
pbc_filtered_trt <- pbc_filtered[pbc_filtered$arm==1,]
pbc_filtered_ctl <- pbc_filtered[pbc_filtered$arm==0,]
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=NULL, timepoints=10, num_intervals=10)
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=10, num_intervals=10)
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=c(5,10), num_intervals=10)
results_2times <- rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=10, num_intervals=10)
results_2times$unadjusted$per_time
results_2times$unadjusted$d
results_1time <- rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=10, num_intervals=10)
results_2times <- rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=c(5,10), num_intervals=10)
results_2times$unadjusted$per_time
results_2times$unadjusted$d
results_2times$unadjusted$d
results_2times$unadjusted$delta
results_2times$unadjusted$V
results_2times$table_pretty
results_2times$table_pretty
library(ggplot2)
library(stringr)
res <- results_2times  # your object
# helper to pull numeric CI bounds from the "est_CI" string
get_bounds <- function(x) {
m <- str_match(x, "\\(([-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?),\\s*([-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?)\\)")
c(lower = as.numeric(m[,2]), upper = as.numeric(m[,3]))
}
# pull a single row (estimate + CI) from unadj/adj per-time or delta
grab <- function(which = c("unadj","adj"), tval = NULL, delta = FALSE) {
which <- match.arg(which)
src <- if (which == "unadj") res$unadjusted else res$adjusted
stopifnot(!is.null(src))  # adjusted may be NULL if you ran without covariates
df <- if (!delta) {
src$per_time %>%
filter(contrast == "Treated - Control",
as.character(time) == as.character(tval)) %>%
slice(1)
} else {
src$delta %>% slice(1)
}
b <- get_bounds(df$est_CI[1])
tibble(Estimate = df$estimate[1],
Lower_CI = b["lower"],
Upper_CI = b["upper"])
}
# build long dataset in the order you described:
estimates_long <- bind_rows(
mutate(grab("unadj", tval = 5,  delta = FALSE), Timepoint = "5 years",  Model = "Unadjusted"),
mutate(grab("adj",   tval = 5,  delta = FALSE), Timepoint = "5 years",  Model = "Adjusted"),
mutate(grab("unadj", tval = 10, delta = FALSE), Timepoint = "10 years", Model = "Unadjusted"),
mutate(grab("adj",   tval = 10, delta = FALSE), Timepoint = "10 years", Model = "Adjusted"),
mutate(grab("unadj", delta = TRUE),             Timepoint = "Difference (10y - 5y)", Model = "Unadjusted"),
mutate(grab("adj",   delta = TRUE),             Timepoint = "Difference (10y - 5y)", Model = "Adjusted")
) %>%
select(Timepoint, Model, Estimate, Lower_CI, Upper_CI) %>%
mutate(
Timepoint = factor(Timepoint,
levels = c("Difference (10y - 5y)", "10 years", "5 years")),
Estimate_CI = sprintf("%.2f (%.2f, %.2f)", Estimate, Lower_CI, Upper_CI)
)
estimates_long
# Plot
ggplot(estimates_long, aes(x = Timepoint, y = Estimate, color = Model)) +
geom_point(size = 4, shape = 16, position = position_dodge(width = 0.6)) +  # Circles for both
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI),
width = 0.2, position = position_dodge(width = 0.6), size = 1) +
coord_flip() +
scale_color_manual(values = c("blue", "black")) +
theme_minimal(base_size = 14) +
labs(title = "Restricted Mean Survival Time Difference Estimates at 5 and 10 Years",
x = "Timepoint",
y = "RMST Difference (Years)",
color = "Estimator") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "top",
plot.margin = margin(5, 20, 5, 5)  # Adjust margins as needed
) +
geom_vline(xintercept = 1.4, linetype = "dashed", size=1, color = "red")+
# Add Estimate (95% CI) below the bars
geom_text(aes(label = Estimate_CI),
position = position_dodge(width = 0.6),
vjust = 2,  # Move text below the bar
size = 4,
hjust = 0.5, show.legend = F) +
# Expand plot to ensure space for text below
scale_y_continuous(expand = expansion(mult = c(0.2, 0.1)))
# Plot
ggplot(estimates_long, aes(x = Timepoint, y = Estimate, color = Model)) +
geom_point(size = 4, shape = 16, position = position_dodge(width = 0.6)) +  # Circles for both
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI),
width = 0.2, position = position_dodge(width = 0.6), size = 1) +
coord_flip() +
scale_color_manual(values = c("blue", "black")) +
theme_minimal(base_size = 14) +
labs(title = "Restricted Mean Survival Time Difference Estimates at 5 and 10 Years",
x = "Timepoint",
y = "RMST Difference (Years)",
color = "Estimator") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "top",
plot.margin = margin(5, 20, 5, 5)  # Adjust margins as needed
) +
geom_vline(xintercept = 1.4, linetype = "dashed", size=1, color = "red")+
geom_hline(yintercept = 0, linetype = "dashed")+
# Add Estimate (95% CI) below the bars
geom_text(aes(label = Estimate_CI),
position = position_dodge(width = 0.6),
vjust = 2,  # Move text below the bar
size = 4,
hjust = 0.5, show.legend = F) +
# Expand plot to ensure space for text below
scale_y_continuous(expand = expansion(mult = c(0.2, 0.1)))
# Plot
ggplot(estimates_long, aes(x = Timepoint, y = Estimate, color = Model)) +
geom_point(size = 4, shape = 16, position = position_dodge(width = 0.6)) +  # Circles for both
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI),
width = 0.2, position = position_dodge(width = 0.6), size = 1) +
coord_flip() +
scale_color_manual(values = c("blue", "black")) +
theme_minimal(base_size = 14) +
labs(title = "Restricted Mean Survival Time Difference Estimates at 5 and 10 Years",
x = "Timepoint",
y = "RMST Difference (Years)",
color = "Estimator") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "top",
plot.margin = margin(5, 20, 5, 5)  # Adjust margins as needed
) +
geom_vline(xintercept = 1.4, linetype = "dashed", size=1, color = "red")+
geom_hline(yintercept = 0, linetype = "dashed", color = "grey")+
# Add Estimate (95% CI) below the bars
geom_text(aes(label = Estimate_CI),
position = position_dodge(width = 0.6),
vjust = 2,  # Move text below the bar
size = 4,
hjust = 0.5, show.legend = F) +
# Expand plot to ensure space for text below
scale_y_continuous(expand = expansion(mult = c(0.2, 0.1)))
# Plot
ggplot(estimates_long, aes(x = Timepoint, y = Estimate, color = Model)) +
geom_point(size = 4, shape = 16, position = position_dodge(width = 0.6)) +  # Circles for both
geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI),
width = 0.2, position = position_dodge(width = 0.6), size = 1) +
coord_flip() +
scale_color_manual(values = c("blue", "black")) +
theme_minimal(base_size = 14) +
labs(title = "Restricted Mean Survival Time Difference Estimates at 5 and 10 Years",
x = "Timepoint",
y = "RMST Difference (Years)",
color = "Estimator") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "top",
plot.margin = margin(5, 20, 5, 5)  # Adjust margins as needed
) +
geom_vline(xintercept = 1.4, linetype = "dashed", size=1, color = "red")+
#geom_hline(yintercept = 0, linetype = "dashed", color = "grey")+
# Add Estimate (95% CI) below the bars
geom_text(aes(label = Estimate_CI),
position = position_dodge(width = 0.6),
vjust = 2,  # Move text below the bar
size = 4,
hjust = 0.5, show.legend = F) +
# Expand plot to ensure space for text below
scale_y_continuous(expand = expansion(mult = c(0.2, 0.1)))
rmarkdown::render("vignettes/RMST-RBANCOVA.Rmd")
