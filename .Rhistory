usethis::create_package(".")
usethis::use_description(fields=list())
usethis::use_rstudio()
usethis::use_package_doc()
devtools::load_all()
devtools::document()
devtools::load_all()
usethis::use_vignette("RMST-RBANCOVA")
library(RBANCOVA.RMST)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
library(RBANCOVA.RMST)
devtools::document()
devtools::build_vignettes()
rmarkdown::render("vignettes/RMST-RBANCOVA.Rmd")
getwd()
rmarkdown::render(
"vignettes/RMST-RBANCOVA.Rmd",                # your Rmd path
output_format = rmarkdown::md_document(variant = "gfm"),
output_file   = "RMST-RBANCOVA.md",           # filename you want
output_dir    = "vignettes"                     # put the .md next to the .Rmd
)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
#devtools::load_all("..")
devtools:install.packages()
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
devtools::load_all("..")
devtools:install.packages()
devtools::install.packages()
devtools::install(.packages()))
devtools::install()
library(RBANCOVA.RMST)
rmarkdown::render()
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
#--------------------------------------------------------------------------------#
# Filter PBC Data
#--------------------------------------------------------------------------------#
library(survival)
#Filter to those enrolled in the randomized trial
pbc_filtered <- pbc %>% filter(!is.na(trt))
pbc
library(dplyr)
#Filter to those enrolled in the randomized trial
pbc_filtered <- pbc %>% filter(!is.na(trt))
pbc_filtered
#Original data: 0/1/2 = censored/transplant/dead
##Edit so that transplant = censored at time of transplant [death = 1, 0 = censored/transplant]
pbc_filtered <- pbc_filtered %>%
mutate(status_dichot = ifelse(status == 2, 1, 0))
#Create year variable and create arm variable [0=placebo, 1=D-penicillmain]
pbc_filtered <- pbc_filtered %>%
mutate(time_year = time/365,
arm = ifelse(trt == 2, 0, trt))
#Current RBANCOVA-RMST methodology assumes no missing data
#impute mean copper level within each group when missing.
mean_copper_1 <- mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==1,]$copper)
mean_copper_0 <-  mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==0,]$copper)
pbc_filtered <- pbc_filtered %>%
mutate(copper_imp = ifelse(is.na(copper), ifelse(arm==1, mean_copper_1, mean_copper_0), copper))
fit_trt <- survfit(Surv(time_year, status_dichot) ~ arm,
data =pbc_filtered)
fit_trt
fit_surv <- survfit2(Surv(time_year, status_dichot) ~ arm, data = pbc_filtered)
library(survminer)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
fit_surv <- survfit2(Surv(time_year, status_dichot) ~ arm, data = pbc_filtered)
library(ggsurvfit)
install.packages("ggsurvfit")
library(ggsurvfit)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ arm,
data =pbc_filtered)
fit_surv <- survfit2(Surv(time_year, status_dichot) ~ arm, data = pbc_filtered)
survfit2(Surv(time_year, status_dichot) ~ arm, data = pbc_filtered)
library(ggsurvfit)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ arm,
data =pbc_filtered)
fit_surv <- survfit2(Surv(time_year, status_dichot) ~ arm, data = pbc_filtered)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
#--------------------------------------------------------------------------------#
# Filter PBC Data
#--------------------------------------------------------------------------------#
library(survival)
#Filter to those enrolled in the randomized trial
pbc_filtered <- pbc %>% filter(!is.na(trt))
#Original data: 0/1/2 = censored/transplant/dead
##Edit so that transplant = censored at time of transplant [death = 1, 0 = censored/transplant]
pbc_filtered <- pbc_filtered %>%
mutate(status_dichot = ifelse(status == 2, 1, 0))
#Create year variable and create arm variable [0=placebo, 1=D-penicillmain]
pbc_filtered <- pbc_filtered %>%
mutate(time_year = time/365,
arm = ifelse(trt == 2, 0, trt))
#Current RBANCOVA-RMST methodology assumes no missing data
#impute mean copper level within each group when missing.
mean_copper_1 <- mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==1,]$copper)
mean_copper_0 <-  mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==0,]$copper)
pbc_filtered <- pbc_filtered %>%
mutate(copper_imp = ifelse(is.na(copper), ifelse(arm==1, mean_copper_1, mean_copper_0), copper))
library(survminer)
library(ggsurvfit)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ arm,
data =pbc_filtered)
fit_surv <- survfit2(Surv(time_year, status_dichot) ~ arm, data = pbc_filtered)
library(survRM2)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ arm,
data =pbc_filtered)
fit_surv <- survfit2(Surv(time_year, status_dichot) ~ arm, data = pbc_filtered)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt, data = pbc_filtered)
# choose time ticks for the risk table
time_ticks <- pretty(range(pbc_filtered$time_year, na.rm = TRUE), n = 6)
# get numbers at risk at those times
s <- summary(fit_trt, times = time_ticks)
# reshape into a matrix: rows = strata, cols = time points
labs <- levels(factor(s$strata))
nrisk <- do.call(rbind, lapply(labs, function(g) s$n.risk[s$strata == g]))
# draw KM curves
plot(fit_trt, mark.time = FALSE, xlab = "Years", ylab = "Survival probability",
lwd = 2, col = c("black", "gray40"))
legend("bottomleft", legend = c("D-penicillamine", "Placebo"),
col = c("black", "gray40"), lwd = 2, title = "Trial Arm", bty = "n")
# draw KM curves
plot(fit_trt, mark.time = FALSE, xlab = "Years", ylab = "Survival probability",
lwd = 2, col = c("black", "gray40"))
legend("bottomleft", legend = c("D-penicillamine", "Placebo"),
col = c("black", "gray40"), lwd = 2, title = "Trial Arm", bty = "n")
# add a little space at the bottom for the table
usr <- par("usr")
par(xpd = NA)  # allow drawing in the margin
line_y <- usr[3] - 0.10 * diff(usr[3:4])             # baseline for the table
text(time_ticks, line_y, labels = time_ticks, cex = 0.8)
text(rep(min(time_ticks) - 0.02*diff(range(time_ticks)), length(labs)),
line_y, labels = "", cex = 0.8)                  # spacer
# headers
text(min(time_ticks), line_y + 0.045*diff(usr[3:4]), "Time", adj = 0, cex = 0.8)
for (i in seq_along(labs)) {
text(min(time_ticks) - 0.02*diff(range(time_ticks)),
line_y - i*0.045*diff(usr[3:4]),
labels = labs[i], adj = 0, cex = 0.8)
text(time_ticks,
line_y - i*0.045*diff(usr[3:4]),
labels = nrisk[i, ], cex = 0.8)
}
par(xpd = FALSE)
pbc_filtered_trt <- pbc_filtered[pbc_filtered$arm==1,]
pbc_filtered_ctl <- pbc_filtered[pbc_filtered$arm==0,]
rbancova_rmst(pbc_filtered_trt, pbc_filtered_ctl, time_year, status_dichot, NULL, c(5,10), 10)
pbc_filtered$time_year
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=NULL, timepoints=c(5,10), num_intervals=10)
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=c(5,10), num_intervals=10)
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=NULL, timepoints=c(5,10), num_intervals=10)
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt, data = pbc_filtered, risk.table = TRUE)
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
library(survminer)
# Visualize with survminer
ggsurvplot(survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered),
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=c(10), num_intervals=10)
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=c(5,10), num_intervals=10)
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=10, num_intervals=10)
devtools::document()
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
#--------------------------------------------------------------------------------#
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
#--------------------------------------------------------------------------------#
# Filter PBC Data
#--------------------------------------------------------------------------------#
library(survival)
#Filter to those enrolled in the randomized trial
pbc_filtered <- pbc %>% filter(!is.na(trt))
#Original data: 0/1/2 = censored/transplant/dead
##Edit so that transplant = censored at time of transplant [death = 1, 0 = censored/transplant]
pbc_filtered <- pbc_filtered %>%
mutate(status_dichot = ifelse(status == 2, 1, 0))
#Create year variable and create arm variable [0=placebo, 1=D-penicillmain]
pbc_filtered <- pbc_filtered %>%
mutate(time_year = time/365,
arm = ifelse(trt == 2, 0, trt))
#Current RBANCOVA-RMST methodology assumes no missing data
#impute mean copper level within each group when missing.
mean_copper_1 <- mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==1,]$copper)
mean_copper_0 <-  mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==0,]$copper)
pbc_filtered <- pbc_filtered %>%
mutate(copper_imp = ifelse(is.na(copper), ifelse(arm==1, mean_copper_1, mean_copper_0), copper))
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
pbc_filtered_trt <- pbc_filtered[pbc_filtered$arm==1,]
pbc_filtered_ctl <- pbc_filtered[pbc_filtered$arm==0,]
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=10, num_intervals=10)
devtools::document()
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
#--------------------------------------------------------------------------------#
# Filter PBC Data
#--------------------------------------------------------------------------------#
library(survival)
#Filter to those enrolled in the randomized trial
pbc_filtered <- pbc %>% filter(!is.na(trt))
#Original data: 0/1/2 = censored/transplant/dead
##Edit so that transplant = censored at time of transplant [death = 1, 0 = censored/transplant]
pbc_filtered <- pbc_filtered %>%
mutate(status_dichot = ifelse(status == 2, 1, 0))
#Create year variable and create arm variable [0=placebo, 1=D-penicillmain]
pbc_filtered <- pbc_filtered %>%
mutate(time_year = time/365,
arm = ifelse(trt == 2, 0, trt))
#Current RBANCOVA-RMST methodology assumes no missing data
#impute mean copper level within each group when missing.
mean_copper_1 <- mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==1,]$copper)
mean_copper_0 <-  mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==0,]$copper)
pbc_filtered <- pbc_filtered %>%
mutate(copper_imp = ifelse(is.na(copper), ifelse(arm==1, mean_copper_1, mean_copper_0), copper))
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
pbc_filtered_trt <- pbc_filtered[pbc_filtered$arm==1,]
pbc_filtered_ctl <- pbc_filtered[pbc_filtered$arm==0,]
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=10, num_intervals=10)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(2677)
# During development, you can uncomment the next line in an interactive session
# to use the functions in R/ without installing the package:
# devtools::load_all("..")
devtools::install()
library(RBANCOVA.RMST)
library(dplyr)
#--------------------------------------------------------------------------------#
# Filter PBC Data
#--------------------------------------------------------------------------------#
library(survival)
#Filter to those enrolled in the randomized trial
pbc_filtered <- pbc %>% filter(!is.na(trt))
#Original data: 0/1/2 = censored/transplant/dead
##Edit so that transplant = censored at time of transplant [death = 1, 0 = censored/transplant]
pbc_filtered <- pbc_filtered %>%
mutate(status_dichot = ifelse(status == 2, 1, 0))
#Create year variable and create arm variable [0=placebo, 1=D-penicillmain]
pbc_filtered <- pbc_filtered %>%
mutate(time_year = time/365,
arm = ifelse(trt == 2, 0, trt))
#Current RBANCOVA-RMST methodology assumes no missing data
#impute mean copper level within each group when missing.
mean_copper_1 <- mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==1,]$copper)
mean_copper_0 <-  mean(pbc_filtered[!(is.na(pbc_filtered$copper)) & pbc_filtered$arm==0,]$copper)
pbc_filtered <- pbc_filtered %>%
mutate(copper_imp = ifelse(is.na(copper), ifelse(arm==1, mean_copper_1, mean_copper_0), copper))
library(survminer)
fit_trt <- survfit(Surv(time_year, status_dichot) ~ trt,
data =pbc_filtered)
# Visualize with survminer
ggsurvplot(fit_trt,
data = pbc_filtered,
risk.table = TRUE,
censor.shape = NA,                 # Remove plus signs at censoring points
legend.labs = c("D-penicillamine", "Placebo"),  # Rename the groups
xlab = "Years",                     # Change x-axis label to 'Years'
legend.title = "Trial Arm")
pbc_filtered_trt <- pbc_filtered[pbc_filtered$arm==1,]
pbc_filtered_ctl <- pbc_filtered[pbc_filtered$arm==0,]
rbancova_rmst(data_treated = pbc_filtered_trt, data_control=pbc_filtered_ctl, time_var="time_year", event_var="status_dichot", covariate_vars=c("stage","copper_imp", "bili", "albumin"), timepoints=10, num_intervals=10)
